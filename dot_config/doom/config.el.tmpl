;; -*- lexical-binding: t; mode: emacs-lisp -*-

(setq user-full-name "Jo√£o Fernandes"
      user-mail-address "joaofnds@joaofnds.com"

      make-backup-files nil

      initial-frame-alist '((width . 120)
                            (height . 50)
                            (ns-transparent-titlebar t))

      frame-title-format '("%b")

      tab-width 2
      indent-tabs-mode nil
      +format-with-lsp nil

      visual-fill-column-width 120
      visual-fill-column-center-text t

      display-line-numbers t
      display-line-numbers-type 'relative
      display-line-numbers-current-absolute t


      jf/font/fixed-family    "{{ .code.font.family }}"
      jf/font/cursive-family  "CMU Serif"
      jf/font/variable-family "Iosevka Aile"
      jf/font/size {{ .code.font.size }}
      jf/dark-theme 'doom-solarized-dark
      jf/light-theme 'doom-solarized-light

      doom-theme jf/dark-theme
      doom-themes-enable-bold t
      doom-themes-enable-italic t
      doom-font (font-spec :family jf/font/fixed-family :size jf/font/size)
      doom-variable-pitch-font (font-spec :family jf/font/variable-family)
      doom-big-font-increment 6

      projectile-project-search-path '("~/code/")
      projectile-enable-caching nil

      +ivy-project-search-engines '(ag)

      dired-dwim-target t
      org-roam-v2-ack t)

(defalias 'forward-evil-word 'forward-evil-symbol)

(after! elfeed
  (setq-default elfeed-search-filter "+unread")
  (map! :map elfeed-search-mode-map
        :n "g r" #'elfeed-update))

(map!
 "C-s" #'swiper
 :leader
 :desc "open elfeed" "o e" #'elfeed
 :desc "reveal in neotree" "o ." #'+neotree/find-this-file)

(when IS-MAC
  (defun jf/apply-theme ()
    (interactive)
    (pcase (string-trim (shell-command-to-string "osascript -l JavaScript -e \"Application('System Events').appearancePreferences.darkMode.get()\""))
      ("true" (load-theme jf/dark-theme))
      ("false" (load-theme jf/light-theme))))

  (jf/apply-theme)

  (define-key special-event-map [sigusr1] 'jf/apply-theme))

(defun jf/reload-known-projects ()
  (-each
      (-concat
       '("~/notes" "~/code/dotfiles" "~/code/exercism")
       (f-directories "~/code/melhor-envio"))
    'projectile-add-known-project))

(defun jf/restore-frame-size ()
  (set-frame-size
   (selected-frame)
   (alist-get 'width initial-frame-alist)
   (alist-get 'height initial-frame-alist)))

(defun jf/download-exercism-exercise ()
  (interactive)
  (let* ((track-dir (read-directory-name "track: " "~/code/exercism"))
         (track (f-filename track-dir))
         (exercise (read-string "exercise: "))
         (command (s-concat "exercism download --exercise=" exercise " --track=" track))
         (should-run (y-or-n-p (s-concat "Should run '" command "'?"))))
    (when should-run (shell-command command))))

(setq default-cider-options "-M:lib/cider-nrepl"
      cider-options-with-rebl "-M:lib/cider-nrepl:inspect/rebl:middleware/nrebl")

(defun clj/toggle-cider-rebl ()
  (if (string= cider-clojure-cli-global-options default-cider-options)
      (setq cider-clojure-cli-global-options cider-options-with-rebl)
    (setq cider-clojure-cli-global-options default-cider-options)))

(use-package! tree-sitter
  :defer t
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode t)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package! org-roam
  :custom (org-roam-directory (f-join org-directory "roam"))
  :init
  (map! :after org
        :map org-mode-map
        :localleader
        :prefix ("m" . "org-roam")
        "b" #'org-roam-buffer-toggle
        "f" #'org-roam-node-find
        "g" #'org-roam-graph
        "i" #'org-roam-node-insert
        "t" #'org-roam-tag-add
        "T" #'org-roam-tag-remove
        (:prefix ("d" . "by date")
         :desc "Find previous note" "b" #'org-roam-dailies-find-previous-note
         :desc "Find date"          "d" #'org-roam-dailies-find-date
         :desc "Find next note"     "f" #'org-roam-dailies-find-next-note
         :desc "Find tomorrow"      "m" #'org-roam-dailies-find-tomorrow
         :desc "Capture today"      "n" #'org-roam-dailies-capture-today
         :desc "Find today"         "t" #'org-roam-dailies-find-today
         :desc "Capture Date"       "v" #'org-roam-dailies-capture-date
         :desc "Find yesterday"     "y" #'org-roam-dailies-find-yesterday
         :desc "Find directory"     "." #'org-roam-dailies-find-directory))
  :config
  (org-roam-setup))


(add-to-list 'load-path "~/.config/doom")

(use-package! neotree
  :config (load! "neotree-config"))

(use-package! org
  :defer t
  :config (load! "org-config"))

(use-package! tmux-pane
  :defer t
  :bind (("C-\\" . tmux-pane-omni-window-last)
         ("C-k"  . tmux-pane-omni-window-up)
         ("C-j"  . tmux-pane-omni-window-down)
         ("C-h"  . tmux-pane-omni-window-left)
         ("C-l"  . tmux-pane-omni-window-right))
  :config (tmux-pane-mode t))

(with-eval-after-load "emacs-tmux-runner"
  (map!
   (:leader
    (:prefix-map ("x" . "tmux")
     :desc "clear"          "c" #'etr:clear-pane
     :desc "send"           "s" #'etr:send-lines
     :desc "run"            "r" #'etr:run-user-command
     :desc "attach"         "a" #'etr:reset-target-pane
     :desc "forget command" "f" #'etr:forget-user-command))))

(defun after-doom-loaded ()
  (load! "emacs-tmux-runner"))

(add-hook 'emacs-startup-hook #'after-doom-loaded)

(custom-set-variables
 '(elfeed-feeds
   '("http://blog.plataformatec.com.br/feed/"
     "http://feeds.feedburner.com/CssTricks"
     "http://feeds.feedburner.com/codinghorror"
     "http://pragmaticemacs.com/feed/"
     "http://research.swtch.com/feed.atom"
     "https://betweentwoparens.com/rss.xml"
     "https://blog.appsignal.com/feed.xml"
     "https://blog.bigbinary.com/feed.xml"
     "https://blog.cloudflare.com/rss/"
     "https://blog.golang.org/feed.atom"
     "https://blog.gopheracademy.com/index.xml"
     "https://blog.heroku.com/engineering/feed"
     "https://blogs.dropbox.com/tech/feed/"
     "https://cate.blog/feed/"
     "https://daringfireball.net/feeds/main"
     "https://dassur.ma/index.xml"
     "https://developers.google.com/web/updates/rss.xml"
     "https://engineering.wework.com/feed"
     "https://evilmartians.com/chronicles.atom"
     "https://feeds.feedburner.com/2ality"
     "https://feeds.feedburner.com/GiantRobotsSmashingIntoOtherGiantRobots"
     "https://feeds.feedburner.com/philipwalton"
     "https://github.blog/engineering.atom"
     "https://jvns.ca/atom.xml"
     "https://labs.spotify.com/feed/"
     "https://medium.com/feed/building-nubank"
     "https://medium.com/feed/discord-engineering/tagged/engineering"
     "https://medium.com/feed/netflix-techblog"
     "https://oremacs.com/atom.xml"
     "https://otavio.dev/feed/"
     "https://practicalli.github.io/blog/feed.xml"
     "https://scotch.io/feed"
     "https://www.intercom.com/blog/engineering/feed/"
     "https://www.pipefy.com/feed/"
     "https://www.ruby-lang.org/en/feeds/news.rss"
     "https://www.rubytapas.com/feed/"
     "https://www.with-emacs.com/rss.xml")))
