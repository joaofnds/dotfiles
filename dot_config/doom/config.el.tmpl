;; -*- lexical-binding: t; mode: emacs-lisp -*-

(setq user-full-name "Jo√£o Fernandes"
      user-mail-address "joaofnds@joaofnds.com"

      make-backup-files nil

      initial-frame-alist '((width . 120)
                            (height . 50)
                            (ns-transparent-titlebar t))

      frame-title-format '("%b")

      tab-width 2
      indent-tabs-mode nil
      +format-with-lsp nil

      visual-fill-column-width 120
      visual-fill-column-center-text t

      display-line-numbers t
      display-line-numbers-type 'relative
      display-line-numbers-current-absolute t


      jf/font/fixed-family    "{{.emacs.font.family}}"
      jf/font/cursive-family  "CMU Serif"
      jf/font/variable-family "Iosevka Aile"
      jf/font/size {{.emacs.font.size}}
      jf/dark-theme 'doom-solarized-dark
      jf/light-theme 'doom-solarized-light

      doom-theme jf/dark-theme
      doom-themes-enable-bold t
      doom-themes-enable-italic t
      doom-font (font-spec :family jf/font/fixed-family :size jf/font/size)
      doom-variable-pitch-font (font-spec :family jf/font/variable-family)
      doom-big-font-increment 6

      projectile-project-search-path '("~/code/")
      projectile-enable-caching nil

      +ivy-project-search-engines '(ag)

      parinfer-rust-preferred-mode "indent"

      dired-dwim-target t
      emojify--refused-image-download-p t)

(use-package! evil-colemak-basics
  :after f
  :init (setq evil-colemak-basics-layout-mod 'mod-dh))

(defalias 'forward-evil-word 'forward-evil-symbol)

(defun jf/notes/open-home ()
  (interactive)
  (let ((drop-in-line 25))
    (find-file "~/notes/home.org")
    (evil-goto-line drop-in-line)
    (evil-scroll-line-to-bottom drop-in-line)
    (org-set-startup-visibility)))

(map!
 "C-s" #'swiper
 :leader
 :desc "open elfeed" "o e" #'elfeed
 :desc "reveal in neotree" "o ." #'+neotree/find-this-file
 :desc "grab macOS link"   "o g" #'org-mac-link-link
 :desc "home.org" "n h" #'jf/notes/open-home)

(with-eval-after-load "jf"
  (when IS-MAC (define-key special-event-map [sigusr1] 'jf/apply-theme)))

(add-hook
 'window-setup-hook
 (lambda () (load! (concat doom-user-dir "jf"))))

(use-package! format-all
  :commands format-all-buffer
  :init
  (map! :leader :desc "format buffer" "c f" #'format-all-buffer)
  :config
  (setq-default
   format-all-formatters
   '(("Go" goimports)
     ("JavaScript" prettier)
     ("Python" black)
     ("Ruby" rubocop)
     ("TypeScript" prettier))))


(use-package! org
  :defer t
  :config (load! (concat doom-user-dir "org-config")))

(use-package! org-menu
  :after org
  :init
  (map! :mode org
        :leader
        :desc "Org Menu"
        "m m" #'org-menu))

(use-package! org-journal
  :after (org)
  :init
  (setq org-journal-enable-agenda-integration t
        org-journal-file-type 'weekly
        org-journal-file-format "%Y-w%V")
  (map! :leader
        :desc "Current Entry"
        "n j ." #'org-journal-open-current-journal-file))

(use-package! org-mac-link
  :after (org)
  :commands (org-mac-grab-link))

(use-package! org-download
  :after (org)
  :init
  (setq-default
   org-download-method 'directory          ;; download to a directory...
   org-download-image-dir "./attachments/" ;; ...based on the current one
   org-download-heading-lvl nil            ;; don't create nested folders
   org-download-timestamp ""))             ;; don't add a timestamp

(use-package! org-roam
  :commands (org-roam-node-find)
  :custom (org-roam-directory (concat org-directory "roam"))
  :init
  (map! :leader :prefix ("r" . "roam")
        "c" #'org-roam-capture
        "f" #'org-roam-node-find
        "i" #'org-roam-node-insert

        "b" #'org-roam-buffer-toggle
        "g" #'org-roam-graph

        "t" #'org-roam-tag-add
        "T" #'org-roam-tag-remove

        (:prefix ("r" . "refs")
         :desc "add ref"    "a" #'org-roam-ref-add
         :desc "remove ref" "r" #'org-roam-ref-remove
         :desc "find ref"   "f" #'org-roam-ref-find)

        (:prefix ("a" . "aliases")
         :desc "add alias"    "a" #'org-roam-alias-add
         :desc "remove alias" "r" #'org-roam-alias-remove)

        (:prefix ("d" . "dailies")
         :desc "Find previous note" "b" #'org-roam-dailies-find-previous-note
         :desc "Find date"          "d" #'org-roam-dailies-find-date
         :desc "Find next note"     "f" #'org-roam-dailies-find-next-note
         :desc "Find tomorrow"      "m" #'org-roam-dailies-find-tomorrow
         :desc "Capture today"      "n" #'org-roam-dailies-capture-today
         :desc "Find today"         "t" #'org-roam-dailies-find-today
         :desc "Capture Date"       "v" #'org-roam-dailies-capture-date
         :desc "Find yesterday"     "y" #'org-roam-dailies-find-yesterday
         :desc "Find directory"     "." #'org-roam-dailies-find-directory))

  (setq org-roam-v2-ack t
        org-roam-graph-filetype "png")

  :config
  (org-roam-setup))

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(use-package! org-appear
  :after org
  :init
  (setq org-appear-autoemphasis t
        org-appear-autoentities t
        org-appear-autokeywords t
        org-appear-autolinks t
        org-appear-autosubmarkers t)
  :config
  (add-hook! 'org-mode-hook #'org-appear-mode))

(use-package! neotree
  :defer t
  :config
  (setq doom-themes-neotree-file-icons t)

  (defun neotree-move-node ()
    "Move current node to another directory."
    (interactive)
    (if-let* ((current-path (neo-buffer--get-filename-current-line)
                            (to-path (read-file-name (format "Move %s to:" (f-filename current-path))))))
        (if (f-directory-p to-path
                           (f-move current-path to-path))
            (rename-file current-path to-path)))
    (neo-buffer--refresh t))

  (defalias 'neotree-add-node 'neotree-create-node)

  (map! :map neotree-mode-map
        :n "m a" #'neotree-add-node
        :n "m m" #'neotree-rename-node
        :n "m d" #'neotree-delete-node
        :n "m c" #'neotree-copy-node

        :n "A" #'neotree-stretch-toggle
        :n "I" #'neotree-hidden-file-toggle
        :n "i" #'neotree-enter-horizontal-split
        :n "s" #'neotree-enter-vertical-split
        :n "p" #'neotree-select-up-node

        :n "g r" #'neotree-refresh))

(use-package! tmux-pane
  :defer t
  :bind (("C-\\" . tmux-pane-omni-window-last)
         ("C-k"  . tmux-pane-omni-window-up)
         ("C-j"  . tmux-pane-omni-window-down)
         ("C-h"  . tmux-pane-omni-window-left)
         ("C-l"  . tmux-pane-omni-window-right))
  :config (tmux-pane-mode t))

(use-package! emacs-tmux-runner
  :commands (etr:send-lines etr:run-user-command)
  :init
  (map!
   (:leader
    (:prefix-map ("x" . "tmux")
     :desc "clear"          "c" #'etr:clear-pane
     :desc "send"           "s" #'etr:send-lines
     :desc "run"            "r" #'etr:run-user-command
     :desc "attach"         "a" #'etr:reset-target-pane
     :desc "forget command" "f" #'etr:forget-user-command))))

(use-package! elfeed
  :commands elfeed
  :config
  (map! :map elfeed-search-mode-map
        :n "g r" #'elfeed-update)

  (setq-default elfeed-search-filter "+unread")

  (setq-hook! 'elfeed-search-mode-hook
    elfeed-feeds
    '("http://blog.plataformatec.com.br/feed/"
      "http://feeds.feedburner.com/codinghorror"
      "http://pragmaticemacs.com/feed/"
      "http://research.swtch.com/feed.atom"
      "https://betweentwoparens.com/rss.xml"
      "https://blog.appsignal.com/feed.xml"
      "https://blog.bigbinary.com/feed.xml"
      "https://blog.cloudflare.com/rss/"
      "https://blog.golang.org/feed.atom"
      "https://blog.gopheracademy.com/index.xml"
      "https://blog.heroku.com/engineering/feed"
      "https://blogs.dropbox.com/tech/feed/"
      "https://cate.blog/feed/"
      "https://dassur.ma/index.xml"
      "https://developers.google.com/web/updates/rss.xml"
      "https://engineering.wework.com/feed"
      "https://evilmartians.com/chronicles.atom"
      "https://feeds.feedburner.com/2ality"
      "https://feeds.feedburner.com/GiantRobotsSmashingIntoOtherGiantRobots"
      "https://feeds.feedburner.com/philipwalton"
      "https://jvns.ca/atom.xml"
      "https://labs.spotify.com/feed/"
      "https://martinfowler.com/feed.atom"
      "https://medium.com/feed/building-nubank"
      "https://medium.com/feed/discord-engineering/tagged/engineering"
      "https://medium.com/feed/netflix-techblog"
      "https://oremacs.com/atom.xml"
      "https://otavio.dev/feed/"
      "https://practicalli.github.io/blog/feed.xml"
      "https://www.intercom.com/blog/engineering/feed/"
      "https://www.ruby-lang.org/en/feeds/news.rss"
      "https://www.rubytapas.com/feed/"
      "https://www.with-emacs.com/rss.xml")))

(customize-set-value
 'sql-connection-alist
 '(("local"
    (sql-product 'postgres)
    (sql-user "postgres")
    (sql-database "postgres")
    (sql-server "localhost"))))
