;; -*- lexical-binding: t; mode: emacs-lisp -*-

(setq user-full-name "JoÃ£o Fernandes"
      user-mail-address "joaofnds@joaofnds.com"

      make-backup-files nil

      initial-frame-alist '((width . 120)
                            (height . 50)
                            (ns-transparent-titlebar t))

      frame-title-format '("%b")

      tab-width 2
      indent-tabs-mode nil
      +format-with-lsp nil

      display-line-numbers t
      display-line-numbers-type 'relative
      display-line-numbers-current-absolute t

      jf/font/fixed-family    "{{.emacs.font.family}}"
      jf/font/cursive-family  "CMU Serif"
      jf/font/variable-family "Iosevka Aile"
      jf/font/size {{.emacs.font.size}}
      jf/dark-theme 'doom-solarized-dark
      jf/light-theme 'doom-solarized-light

      doom-theme jf/dark-theme
      doom-themes-enable-bold t
      doom-themes-enable-italic t
      doom-font (font-spec :family jf/font/fixed-family :size jf/font/size)
      doom-variable-pitch-font (font-spec :family jf/font/variable-family)
      doom-big-font-increment 6)

(defalias 'forward-evil-word 'forward-evil-symbol)

(add-hook
 'window-setup-hook
 (lambda () (load! (concat doom-user-dir "jf"))))

(map!
 "C-s" #'swiper
 :leader
 :desc "open elfeed" "o e" #'elfeed
 :desc "reveal in neotree" "o ." #'+neotree/find-this-file
 :desc "grab macOS link"   "o g" #'org-mac-link-get-link
 :desc "home.org" "n h" #'jf/notes/open-home)

(use-package! evil
  :config
  (map!
   :prefix "g"
   (:prefix ("t" . "time")
    :desc "iso8601 to unix" :v "e" #'timestamp-encode-region
    :desc "unix to iso8601" :v "d" #'timestamp-decode-region)
   (:prefix ("b" . "base64")
    :desc "encode" :v "e" #'base64-encode-region
    :desc "decode" :v "d" #'base64-decode-region)
   :v "x" nil
   (:prefix ("x" . "hex")
    :desc "encode" :v "e" #'hex-encode-region
    :desc "decode" :v "d" #'hex-decode-region)))

(defmacro ->> (&rest body)
  (let ((result (pop body)))
    (dolist (form body result)
      (setq result (append form (list result))))))

(defmacro -> (&rest body)
  (let ((result (pop body)))
    (dolist (form body result)
      (setq result (append (list (car form) result)
                           (cdr form))))))

(defun hex-decode-region (start end)
  (interactive "r")
  (let ((text (buffer-substring start end)))
    (delete-region start end)
    (insert (number-to-string (string-to-number text 16)))))

(defun hex-encode-region (start end)
  (interactive "r")
  (let ((text (buffer-substring start end)))
    (delete-region start end)
    (insert (format "%x" (string-to-number text)))))

(defun timestamp-decode-region (start end)
  (interactive "r")
  (->> (buffer-substring start end)
       (s-left 10)
       (string-to-number)
       (format-time-string "%Y-%m-%dT%T%z")
       (insert))
  (delete-region start end))

(defun timestamp-encode-region (start end)
  (interactive "r")
  (->> (buffer-substring start end)
       (parse-time-string)
       (encode-time)
       (format-time-string "%s")
       (insert))
  (delete-region start end))

(use-package! nyan-mode
  :after-call doom-setup-hook
  :init
  (setq nyan-animate-nyancat t
        nyan-wavy-trail t)
  (nyan-mode t))

(use-package! parinfer-rust-mode
  :defer t
  :init
  (setq parinfer-rust-preferred-mode "indent"))

(use-package! projectile
  :defer t
  :init
  (setq projectile-project-search-path '("~/code/")
        projectile-enable-caching nil))

(use-package! ivy
  :defer t
  :init
  (setq +ivy-project-search-engines '(ag)))

(use-package! format-all
  :commands format-all-buffer
  :init
  (map! :leader :desc "format buffer" "c f" #'format-all-buffer)
  :config
  (setq-default
   format-all-formatters
   '(("Go" goimports)
     ("JavaScript" prettier)
     ("Python" black)
     ("Ruby" rubocop)
     ("TypeScript" prettier))))


(use-package! org
  :defer t
  :config (load! (concat doom-user-dir "org-config")))

(use-package! org-mac-link
  :after (org)
  :commands (org-mac-link-get-link))

(use-package! org-appear
  :after org
  :init
  (setq org-appear-autoemphasis t
        org-appear-autoentities t
        org-appear-autokeywords t
        org-appear-autolinks t
        org-appear-autosubmarkers t)
  :config
  (add-hook! 'org-mode-hook #'org-appear-mode))

(use-package! neotree
  :defer t
  :config
  (setq doom-themes-neotree-file-icons t)

  (defun neotree-move-node ()
    "Move current node to another directory."
    (interactive)
    (if-let* ((current-path (neo-buffer--get-filename-current-line))
              (to-path (read-file-name (format "Move %s to:" (f-filename current-path)))))
        (if (f-directory-p to-path
                           (f-move current-path to-path))
            (rename-file current-path to-path)))
    (neo-buffer--refresh t))

  (defalias 'neotree-add-node 'neotree-create-node)

  (push 'neotree-mode evil-snipe-disabled-modes)

  (map! :map neotree-mode-map
        (:prefix "m"
         :desc "add"    :n "a" #'neotree-add-node
         :desc "move"   :n "m" #'neotree-rename-node
         :desc "delete" :n "d" #'neotree-delete-node
         :desc "copy"   :n "c" #'neotree-copy-node
         :desc "open"   :n "o" #'neotree-enter
         :desc "yank"   :n "y" #'neotree-copy-filepath-to-yank-ring)

        :n "A" #'neotree-stretch-toggle
        :n "I" #'neotree-hidden-file-toggle
        :n "i" #'neotree-enter-horizontal-split
        :n "s" #'neotree-enter-vertical-split
        :n "p" #'neotree-select-up-node

        :n "g r" #'neotree-refresh))

(use-package! tmux-pane
  :defer t
  :bind (("C-\\" . tmux-pane-omni-window-last)
         ("C-k"  . tmux-pane-omni-window-up)
         ("C-j"  . tmux-pane-omni-window-down)
         ("C-h"  . tmux-pane-omni-window-left)
         ("C-l"  . tmux-pane-omni-window-right))
  :config (tmux-pane-mode t))

(use-package! emacs-tmux-runner
  :commands (etr:send-lines etr:run-user-command)
  :init
  (map!
   (:leader
    (:prefix-map ("x" . "tmux")
     :desc "clear"          "c" #'etr:clear-pane
     :desc "send"           "s" #'etr:send-lines
     :desc "run"            "r" #'etr:run-user-command
     :desc "attach"         "a" #'etr:reset-target-pane
     :desc "forget command" "f" #'etr:forget-user-command))))

(use-package! elfeed
  :commands elfeed
  :config
  (map! :map elfeed-search-mode-map
        :n "g r" #'elfeed-update)

  (setq-default elfeed-search-filter "+unread")

  (setq-hook! 'elfeed-search-mode-hook
    elfeed-feeds
    '("http://blog.plataformatec.com.br/feed/"
      "http://feeds.feedburner.com/codinghorror"
      "http://pragmaticemacs.com/feed/"
      "http://research.swtch.com/feed.atom"
      "https://betweentwoparens.com/rss.xml"
      "https://blog.appsignal.com/feed.xml"
      "https://blog.bigbinary.com/feed.xml"
      "https://blog.cloudflare.com/rss/"
      "https://blog.golang.org/feed.atom"
      "https://blog.gopheracademy.com/index.xml"
      "https://blog.heroku.com/engineering/feed"
      "https://blogs.dropbox.com/tech/feed/"
      "https://cate.blog/feed/"
      "https://dassur.ma/index.xml"
      "https://developers.google.com/web/updates/rss.xml"
      "https://engineering.wework.com/feed"
      "https://evilmartians.com/chronicles.atom"
      "https://feeds.feedburner.com/2ality"
      "https://feeds.feedburner.com/GiantRobotsSmashingIntoOtherGiantRobots"
      "https://feeds.feedburner.com/philipwalton"
      "https://jvns.ca/atom.xml"
      "https://labs.spotify.com/feed/"
      "https://martinfowler.com/feed.atom"
      "https://medium.com/feed/building-nubank"
      "https://medium.com/feed/discord-engineering/tagged/engineering"
      "https://medium.com/feed/netflix-techblog"
      "https://oremacs.com/atom.xml"
      "https://otavio.dev/feed/"
      "https://practicalli.github.io/blog/feed.xml"
      "https://www.intercom.com/blog/engineering/feed/"
      "https://www.ruby-lang.org/en/feeds/news.rss"
      "https://www.rubytapas.com/feed/"
      "https://www.with-emacs.com/rss.xml")))

(customize-set-value
 'sql-connection-alist
 '(("local"
    (sql-product 'postgres)
    (sql-user "postgres")
    (sql-database "postgres")
    (sql-server "localhost"))))
