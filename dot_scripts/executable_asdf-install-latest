#!/usr/bin/env ruby

class ASDF
  class << self
    def update_plugin(plugin)
      `asdf plugin-update #{plugin}`
    end

    def plugin_list
      `asdf plugin-list`.split("\n")
    end

    def list(plugin)
      `asdf list #{plugin}`.split("\n")
    end

    def install_latest(plugin)
      `asdf install #{plugin} latest`
    end

    def global(plugin, version)
      `asdf global #{plugin} #{version}`
    end
  end
end

class Plugin
  attr_reader :name

  alias to_s name

  private

  def initialize(plugin_name)
    @name = plugin_name
  end
end

class PluginManager
  def self.update(plugin_name)
    plugin = Plugin.new(plugin_name)
    new(plugin).tap(&:update_to_latest)
  end

  def update_to_latest
    update_plugin
    install_latest
  end

  def set_global_to_latest
    latest_version = ASDF.list(plugin.name).last
    puts "[#{plugin}] setting global version to #{latest_version}"
    ASDF.global(plugin.name, latest_version)
  end

  private

  attr_reader :plugin

  def initialize(plugin)
    @plugin = plugin
  end

  def update_plugin
    ASDF.update_plugin(plugin.name)
  end

  def install_latest
    puts "[#{plugin}] installing latest version"
    ASDF.install_latest(plugin.name)
  end
end

# We can update each language concurrently, but as setting the global version
# just writes to ~/.tool-versions (single file), we need to do this in series.
ASDF.plugin_list.map do |plugin_name|
  Ractor.new plugin_name do |plugin_name|
    PluginManager.update(plugin_name)
  end
end.map(&:take).each(&:set_global_to_latest)
