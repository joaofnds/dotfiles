#!/usr/bin/env ruby

require 'tempfile'

class ASDF
  class << self
    def update_plugin(plugin)
      `asdf plugin-update #{plugin}`
    end

    def plugin_list
      `asdf plugin-list`.lines.map(&:strip)
    end

    def list(plugin = nil)
      if plugin.nil?
        `asdf list`
      else
        `asdf list #{plugin}`.lines.map(&:strip)
      end
    end

    def install_latest(plugin)
      `asdf install #{plugin} latest`
    end

    def global(plugin, version)
      `asdf global #{plugin} #{version}`
    end

    def reshim
      `asdf reshim`
    end
  end
end

class Plugin
  attr_reader :name

  alias to_s name

  private

  def initialize(plugin_name)
    @name = plugin_name
  end
end

class PluginManager
  def self.update(plugin_name)
    plugin = Plugin.new(plugin_name)
    new(plugin).tap(&:update_to_latest)
  end

  def update_to_latest
    update_plugin
    install_latest
    install_default_packages if version_changed?
  end

  def set_global_to_latest
    return unless version_changed?

    puts "[#{plugin}] setting global version to #{latest_version}"
    ASDF.global(plugin.name, latest_version)
  end

  def install_default_packages
    puts "[#{plugin}] installing default packages"
    system(default_packages_installer_script) if has_default_packages_installer?
  end

  private

  attr_reader :plugin, :current_version

  def initialize(plugin)
    @plugin = plugin
    @current_version = latest_version
  end

  def update_plugin
    ASDF.update_plugin(plugin.name)
  end

  def install_latest
    puts "[#{plugin}] installing latest version"
    ASDF.install_latest(plugin.name)
  end

  def default_packages_installer_script
    "install-default-#{plugin.name}-packages.sh"
  end

  def has_default_packages_installer?
    `which #{default_packages_installer_script}`
    $?.success?
  end

  def latest_version
    ASDF.list(plugin.name).last
  end

  def version_changed?
    current_version != latest_version
  end
end

before = ASDF.list

# We can update each language concurrently, but as setting the global version
# just writes to ~/.tool-versions (single file), we need to do this in series.
ASDF.plugin_list.map do |plugin_name|
  Ractor.new plugin_name do |plugin_name|
    PluginManager.update(plugin_name)
  end
end.map(&:take).each(&:set_global_to_latest)

ASDF.reshim

after = ASDF.list

Tempfile.open('a') do |a|
  Tempfile.open('b') do |b|
    a.write(before)
    b.write(after)
    [a, b].each(&:flush)

    system("delta --file-style omit #{a.path} #{b.path}")
  end
end
