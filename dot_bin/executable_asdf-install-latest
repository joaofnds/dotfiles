#!/usr/bin/env ruby
# frozen_string_literal: true

require 'scanf'

SEMVER_FORMAT = /^\d+(\.\d+){1,2}$/.freeze

plugins = %w[
  java
  clojure
  cmake
  elm
  erlang
  elixir
  golang
  haskell
  nodejs
  postgres
  python
  redis
  ruby
  rust
  shellcheck
]

class TmuxPane
  def self.run_shell(command)
    `tmux run-shell "#{command}"`
  end

  def create!
    `tmux new-window -n "#{name}" -d`
  end

  def run_command(shell_command)
    `tmux send-keys -t #{name} "#{shell_command}" Enter`
  end

  def kill!
    `tmux kill-window -t #{name}`
  end

  private

  attr_reader :name

  def initialize(name)
    @name = name
  end
end

def fill(arr, len, fill_value)
  len.times do |i|
    arr[i] = fill_value if arr[i].nil?
  end
  arr
end

def sem_ver(version_str)
  major, minor, patch = version_str.scanf('%d.%d.%d')
  fill([major, minor, patch], 3, 0)
end

def greater_version(a, b)
  a_major, a_minor, a_patch = sem_ver(a)
  b_major, b_minor, b_patch = sem_ver(b)

  return -1 if a_major > b_major
  return 1 if a_major < b_major

  return -1 if a_minor > b_minor
  return 1 if a_minor < b_minor

  return -1 if a_patch > b_patch
  return 1 if a_patch < b_patch

  0
end

def install_plugin(plugin)
  tmux_pane = TmuxPane.new(plugin.strip)
  tmux_pane.create!

  tmux_pane.run_command "asdf plugin-add #{plugin}"

  sorted_versions =
    TmuxPane.run_shell(`asdf list-all #{plugin}`)
    .split("\n")
    .grep(SEMVER_FORMAT)
    .sort { |a, b| greater_version(a, b) }

  if sorted_versions.empty?
    puts "could not find versions for #{plugin}"
  else
    latest_version = sorted_versions[0]

    puts "installing #{plugin}: #{latest_version}"
    tmux_pane.run_command "asdf install #{plugin} #{latest_version}"

    puts "setting asdf global #{plugin} to #{latest_version}"
    tmux_pane.run_command "asdf global #{plugin} #{latest_version}"
  end
  tmux_pane.kill!
end

# plugins.each { |p| install_plugin(p) }
plugins
  .map { |p| Thread.new { install_plugin(p) } }
  .map(&:join)
puts
